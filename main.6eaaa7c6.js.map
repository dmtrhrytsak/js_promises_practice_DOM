{"version":3,"sources":["scripts/main.js"],"names":["handleSuccess","result","successNotification","document","createElement","dataset","qa","className","innerText","body","append","handleRejection","error","warningNotification","firstPromise","Promise","resolve","reject","addEventListener","setTimeout","Error","secondPromise","thirdPromise","all","then"],"mappings":";AAAA,aAEA,IAAMA,EAAgB,SAACC,GACfC,IAAAA,EAAsBC,SAASC,cAAc,gBAEnDF,EAAoBG,QAAQC,GAAK,eACjCJ,EAAoBK,UAAY,UAChCL,EAAoBM,UAAYP,EAEhCE,SAASM,KAAKC,OAAOR,IAGjBS,EAAkB,SAACC,GACjBC,IAAAA,EAAsBV,SAASC,cAAc,gBAEnDS,EAAoBR,QAAQC,GAAK,eACjCO,EAAoBN,UAAY,UAChCM,EAAoBL,UAAYI,EAEhCT,SAASM,KAAKC,OAAOG,IAGjBC,EAAe,IAAIC,QAAQ,SAACC,EAASC,GACzCd,SAASe,iBAAiB,QAAS,WACjCF,EAAQ,gCAGVG,WAAW,WACTF,EAAO,IAAIG,MAAM,kCAChB,OAGCC,EAAgB,IAAIN,QAAQ,SAACC,GACjCb,SAASe,iBAAiB,QAAS,WACjCF,EAAQ,iCAGVb,SAASe,iBAAiB,cAAe,WACvCF,EAAQ,mCAINM,EAAeP,QAAQQ,IAAI,CAC/B,IAAIR,QAAQ,SAACC,GACXb,SAASe,iBAAiB,QAAS,WACjCF,QAGJ,IAAID,QAAQ,SAACC,GACXb,SAASe,iBAAiB,cAAe,WACvCF,UAGHQ,KAAK,WAAM,MAAA,+BAEdV,EAAaU,KAAKxB,EAAeW,GACjCU,EAAcG,KAAKxB,GACnBsB,EAAaE,KAAKxB","file":"main.6eaaa7c6.js","sourceRoot":"..\\src","sourcesContent":["'use strict';\n\nconst handleSuccess = (result) => {\n  const successNotification = document.createElement('notification');\n\n  successNotification.dataset.qa = 'notification';\n  successNotification.className = 'success';\n  successNotification.innerText = result;\n\n  document.body.append(successNotification);\n};\n\nconst handleRejection = (error) => {\n  const warningNotification = document.createElement('notification');\n\n  warningNotification.dataset.qa = 'notification';\n  warningNotification.className = 'warning';\n  warningNotification.innerText = error;\n\n  document.body.append(warningNotification);\n};\n\nconst firstPromise = new Promise((resolve, reject) => {\n  document.addEventListener('click', () => {\n    resolve('First promise was resolved');\n  });\n\n  setTimeout(() => {\n    reject(new Error('First promise was rejected⚠️'));\n  }, 3000);\n});\n\nconst secondPromise = new Promise((resolve) => {\n  document.addEventListener('click', () => {\n    resolve('Second promise was resolved');\n  });\n\n  document.addEventListener('contextmenu', () => {\n    resolve('Second promise was resolved');\n  });\n});\n\nconst thirdPromise = Promise.all([\n  new Promise((resolve) => {\n    document.addEventListener('click', () => {\n      resolve();\n    });\n  }),\n  new Promise((resolve) => {\n    document.addEventListener('contextmenu', () => {\n      resolve();\n    });\n  }),\n]).then(() => 'Third promise was resolved');\n\nfirstPromise.then(handleSuccess, handleRejection);\nsecondPromise.then(handleSuccess);\nthirdPromise.then(handleSuccess);\n"]}